package chapter9;

import java.util.Arrays;
import java.util.List;

import static java.util.Comparator.comparing; //import the comparing method from the Comparator interface to compare movies by time.

import static java.util.stream.Collectors.toList; //import the toList method from the Collectors interface to collect the stream of movies into a list.


public class Movies
{
	public static final Movie OLDBOY = new Movie("Oldboy", 2003, 121);
	public static final Movie METROPOLIS = new Movie("Metropolis", 1927, 153);
	public static final Movie WAGES = new Movie("The Wages of Fear", 1953, 131);
	public static final Movie INTOUCHABLES = new Movie("The Intouchables", 2011, 112);
	public static final Movie AMELIE = new Movie("Amelie", 2001, 121);
	public static final Movie GOODBAD = new Movie("The Good, the Bad, and the Ugly", 1966, 178);
	public static final Movie DIABOLIQUE = new Movie("Diabolique", 1955, 117);
	public static final Movie JOAN = new Movie("The Passion of Joan of Arc", 1928, 114);

	/*?
     * Keyword: movies
     * This method returns a list of movies.
     */
	public static final List<Movie> movies()
	{
	    return Arrays.asList(OLDBOY, METROPOLIS, WAGES, INTOUCHABLES, AMELIE, GOODBAD, DIABOLIQUE, JOAN);
    }

    public static void main(String[] args) 
    {
        /*?
         * Keyword: random
         * The random method in the Random class is used to return a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. It is used in the generate method of the IntStream class to generate a stream of pseudorandom, uniformly distributed int values.
         */
        Random random = new Random();
        System.out.println(
                /*?
                 * Keyword: IntStream
                 * The IntStream class is used to represent a stream of int values and is used to generate a stream of pseudorandom, uniformly distributed int values.
                 * 
                 * Keyword: generate
                 * The generate method in the IntStream class is used to return an infinite sequential unordered stream where each element is generated by the provided Supplier. The supplier in this case is a lambda expression that returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence.
                 * 
                 * Keyword: nextInt
                 * The nextInt method in the Random class is used to return a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. nextInt(101) returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and 101 (exclusive).
                 */
                IntStream.generate(() -> random.nextInt(101))
                        /*?
                         * Keyword: limit
                         * The limit method in the IntStream class is used to return a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length. In this case, the stream is truncated to be no longer than 1000000 in length.
                         */
                        .limit(1000000)
                        /*?
                         * Keyword: summaryStatistics
                         * The summaryStatistics method in the IntStream class is used to return an IntSummaryStatistics describing various summary data about the elements of this stream. It returns an object of type IntSummaryStatistics that contains count, sum, min, average, and max for the elements in the stream.
                         */
                        .summaryStatistics());

        System.out.println(
                /*?
                 * Keyword: DoubleStream
                 * The DoubleStream class is used to represent a stream of double values and is used to generate a stream of pseudorandom, uniformly distributed double values.
                 * 
                 * Keyword: generate
                 * The generate method in the DoubleStream class is used to return an infinite sequential unordered stream where each element is generated by the provided Supplier. The supplier in this case is a lambda expression that returns a pseudorandom, uniformly distributed double value between 0.0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence.
                 * 
                 * Keyword: nextDouble
                 * The nextDouble method in the Random class is used to return a pseudorandom, uniformly distributed double value between 0.0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence. 100 * random.nextDouble() returns a pseudorandom, uniformly distributed double value between 0.0 (inclusive) and 100.0 (exclusive).
                 */
                DoubleStream.generate(() -> 100 * random.nextDouble())
                        /*?
                         * Keyword: limit
                         * The limit method in the DoubleStream class is used to return a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length. In this case, the stream is truncated to be no longer than 1000000 in length.
                         */
                        .limit(1000000)
                        /*?
                         * Keyword: summaryStatistics
                         * The summaryStatistics method in the DoubleStream class is used to return an DoubleSummaryStatistics describing various summary data about the elements of this stream. It returns an object of type DoubleSummaryStatistics that contains count, sum, min, average, and max for the elements in the stream.
                         */
                        .summaryStatistics());

    }

}

